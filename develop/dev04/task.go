package main

import (
	"slices"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

// Функция поиска всех множеств анаграмм по словарю
func AnagramSearch(words []string) map[string][]string {
	result := make(map[string][]string) // Переменная с результатом работы функции
	if len(words) == 0 {                // Если функции был передан пустой список, то возвращается пустая map
		return result
	}

	anagram := [][]string{}     // Слайс, где каждый элемент это множество анаграмм
	symbols := []map[rune]int{} // Слайс, где каждый элемент это слово разложенное по буквам

	for _, item := range words { // Проходим по списку слов
		word := make(map[rune]int)         // Переменная типа map для разложения слов по буквам
		lowerWord := strings.ToLower(item) // Приведение слова к нижнему регистру
		for _, sym := range lowerWord {    // Перебор букв
			word[sym]++ // Добавление букв в map и подсчет того, сколько раз встречается каждая буква
		}

		var found bool                  // Переменная, которая показывает нашлось ли совпадение анаграмм
		for index, m := range symbols { // Перебор всех разложенных по буквам слов
			if len(m) == len(word) { // Если длина разложенного по буквам проверяемого слова равна слову из слайса
				equal := true               // Переменная, которая показывает равно ли проверяемое слово и слово из слайса
				for key, value := range m { // Перебор всех букв слова из слайса разложенных по буквам слов
					if word[key] != value { // Если количество букв в проверяемом слове не совпадает
						equal = false // equal присваивается значение false, что означает не совпадение анаграмм
						break         // Переход к следующему слову
					}
				}
				if equal { // Если анаграммы совпали
					found = true                                       // found присваивается значение true, что означает совпадение анаграмм
					anagram[index] = append(anagram[index], lowerWord) // Добавление слова ко множеству анаграмм
					break                                              // Остановка перебора слов
				}
			}
		}

		if !found { // Если не нашлось совпадения
			anagram = append(anagram, []string{lowerWord}) // Проверяемое слово добавляется в слайс анаграмм как новое множество
			symbols = append(symbols, word)                // Разложение слова по буквам добавляется в соответствующий слайс
		}
	}

	for _, item := range anagram { // Перебор множеств анаграмм
		slices.Sort(item) // Сортировка слов в множествах
	}

	for _, item := range anagram {
		if len(item) > 1 { // Если длина множества больше одного слова
			result[item[0]] = item[1:] // Первое слово добавляется в результат в качестве ключа map, оставшиеся в значение
		}
	}

	return result
}
